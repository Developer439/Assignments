{"ast":null,"code":"var _jsxFileName = \"e:\\\\Personal Stuff\\\\Study\\\\Assignments\\\\ReaCTjs\\\\NOSTRA HIRING ASSIGNMENT\\\\react-frontend\\\\src\\\\components\\\\contest\\\\contest.js\";\nimport React from 'react';\nimport './contest.scss';\nimport '../../style/common/common.scss';\nimport logo from \"../../logo.svg\";\nimport inr_ico from \"../../img/common/rupee-indian.svg\";\nimport { getContests } from '../../services/apis';\n\nclass Contest extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      const that = this;\n      const result = getContests();\n      result.then(function (res) {\n        if (res.data) {\n          const data = res.data;\n          let contests = [],\n              contestsToShow = [],\n              contest_types = [];\n          contests = data.contests;\n          contestsToShow = contests;\n\n          if (contests && contests.length > 0) {\n            contest_types = contests.map((contest, index) => contest.contest_type);\n            contest_types = [...new Set(contest_types)];\n          }\n\n          that.setState({\n            contests,\n            contestsToShow,\n            contest_types\n          });\n        } else {// that.NetworkError();\n        }\n      }).catch(function (error) {// that.NetworkError();\n      });\n    };\n\n    this.showContestCategories = (contest_types = []) => {\n      const that = this;\n      const isAllActive = that.state.isAllActive;\n      const active_contest_type = that.state.active_contest_type;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest_categories\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: isAllActive ? \"contest_category active\" : \"contest_category\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest_category_name\",\n        onClick: () => that.contestTypeFilter(true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, \"All(\", that.state.contests.length, \")\")), contest_types.map(function (contest_type, i) {\n        const isCurrentlyActive = !isAllActive && active_contest_type == contest_type;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: isCurrentlyActive ? \"contest_category  active\" : \" contest_category  \",\n          key: \"sports_\" + i,\n          onClick: () => that.contestTypeFilter(false, contest_type),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 18\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"contest_category_name\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }\n        }, contest_type, \"(\", that.state.contestsToShow.length, \")\"));\n      }));\n    };\n\n    this.showContestDetails = (contestsToShow = []) => {\n      const that = this;\n      console.log(contestsToShow);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest_details_sec\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, \" \", that.state.isAllActive ? 'All' : that.state.active_contest_type, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"noC\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }, \"(\", contestsToShow.length, \")\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest_cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }\n      }, contestsToShow.map(function (data, i) {\n        // const parties = data.match_parties;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"contest_card ui_card ui_card2\",\n          key: \"challenges_\" + i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 18\n          }\n        });\n      })));\n    };\n\n    this.contestTypeFilter = (isAll, contest_type) => {\n      const that = this;\n      let isAllActive = true,\n          active_contest_type = 'ALL';\n      let contestsToShow = [];\n\n      if (!isAll) {\n        isAllActive = false;\n        active_contest_type = contest_type;\n        contestsToShow = that.state.contests.filter(contest => contest.contest_type == contest_type);\n      } else {\n        contestsToShow = that.state.contests;\n      }\n\n      that.setState({\n        contestsToShow,\n        isAllActive,\n        active_contest_type\n      });\n    };\n\n    this.state = {\n      showLoader: false,\n      networkproblem: false,\n      contests: [],\n      contestsToShow: [],\n      contest_types: [],\n      isAllActive: true,\n      active_contest_type: 'ALL'\n    };\n  }\n\n  render() {\n    const that = this;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top_sec dispFlex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"arrow left back_arrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header_title dispFlex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 51\n      }\n    }, \"Choose a contest \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, \"01h 58m 17s \"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content_sec\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, that.showContestCategories(that.state.contest_types), that.showContestDetails(that.state.contestsToShow)));\n  }\n\n}\n\nexport default Contest;","map":{"version":3,"sources":["e:/Personal Stuff/Study/Assignments/ReaCTjs/NOSTRA HIRING ASSIGNMENT/react-frontend/src/components/contest/contest.js"],"names":["React","getContests","Contest","Component","constructor","componentDidMount","that","result","then","res","data","contests","contestsToShow","contest_types","length","map","contest","index","contest_type","Set","setState","catch","error","showContestCategories","isAllActive","state","active_contest_type","contestTypeFilter","i","isCurrentlyActive","showContestDetails","console","log","isAll","filter","showLoader","networkproblem","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './contest.scss';\r\nimport '../../style/common/common.scss';\r\nimport logo from '../../logo.svg';\r\nimport inr_ico from '../../img/common/rupee-indian.svg';\r\nimport { getContests } from '../../services/apis';\r\n\r\nclass Contest extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      showLoader: false,\r\n      networkproblem: false,\r\n      contests: [],\r\n      contestsToShow: [],\r\n      contest_types:[],\r\n      isAllActive: true,\r\n      active_contest_type:'ALL',\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const that = this\r\n    const result = getContests();\r\n    result.then(function (res) {\r\n      if (res.data) {\r\n        const data = res.data\r\n        let  contests = [], contestsToShow = [], contest_types = []\r\n        contests = data.contests;\r\n        contestsToShow = contests;\r\n        if(contests && contests.length>0){\r\n          contest_types = contests.map((contest,index) => contest.contest_type)\r\n          contest_types = [...new Set(contest_types)]\r\n        }\r\n        that.setState({ contests, contestsToShow, contest_types });\r\n      }\r\n      else {\r\n        // that.NetworkError();\r\n      }\r\n    })\r\n      .catch(function (error) {\r\n        // that.NetworkError();\r\n      });\r\n  }\r\n\r\n  showContestCategories = (contest_types = []) => {\r\n    const that = this;\r\n    const isAllActive = that.state.isAllActive;\r\n    const active_contest_type = that.state.active_contest_type;\r\n    return  <div className=\"contest_categories\">\r\n      <div className={isAllActive ? \"contest_category active\" : \"contest_category\"}>\r\n        <div className=\"contest_category_name\" onClick={() => that.contestTypeFilter(true)} >All({that.state.contests.length})</div>\r\n      </div>\r\n      {\r\n        contest_types.map(function (contest_type, i) {\r\n          const isCurrentlyActive = (!isAllActive && (active_contest_type == contest_type));\r\n          return <div className={isCurrentlyActive ? \"contest_category  active\" : \" contest_category  \"}\r\n            key={\"sports_\" + i}\r\n            onClick={() => that.contestTypeFilter(false, contest_type)}\r\n          >\r\n            <div className=\"contest_category_name\">{contest_type}({that.state.contestsToShow.length})</div>\r\n          </div>\r\n        })\r\n      }\r\n    </div>\r\n  }\r\n\r\n  showContestDetails = (contestsToShow = []) => {\r\n    const that = this\r\n    console.log(contestsToShow)\r\n    return <div className=\"contest_details_sec\">\r\n      <div className=\"title\"> {that.state.isAllActive ? 'All' : that.state.active_contest_type}\r\n        <span className=\"noC\">({contestsToShow.length})</span>\r\n      </div>\r\n      <div className=\"contest_cards\">\r\n        {contestsToShow.map(function (data, i) {\r\n          // const parties = data.match_parties;\r\n          return <div className=\"contest_card ui_card ui_card2\" key={\"challenges_\" + i}>\r\n            {/* <div className=\"contest_top\">{data.game_mode}</div>\r\n            <div className=\"contest_mid\">\r\n              <img className=\"party_img\" src={parties[0].party_img_url}></img>\r\n              <div className=\"match_details\">\r\n                <div className=\"challenge_name\">\r\n                  <span className=\"party_short_name txt_right\">\r\n                    {(parties[0].meta_info && parties[0].meta_info.party_short_name) ? parties[0].meta_info.party_short_name : parties[0].party_name}\r\n                  </span><span> VS </span><span className=\"party_short_name txt_left\">\r\n                    {(parties[1].meta_info && parties[1].meta_info.party_short_name) ? parties[1].meta_info.party_short_name : parties[1].party_name}</span>\r\n                </div>\r\n                <div className=\"challenge_details\">\r\n                  <div className=\"desc txt_right\">{data.desc}</div>\r\n                  <div className=\"live_dot\"><div></div></div>\r\n                  <div className=\"txt_left\">Live Score Updates</div>\r\n                </div>\r\n              </div>\r\n              <img className=\"party_img right\" src={parties[1].party_img_url} ></img>\r\n            </div>\r\n            <div className=\"contest_bot\">\r\n              <div className=\"money_sec\">\r\n                <img className=\"curncy_ico\" src={inr_ico}></img>\r\n                <div className=\"prize_money\">{data.prize_money}</div>\r\n              </div>\r\n              <div className=\"time_sec\">\r\n                <img className=\"timer_ico\" src={timer_ico}></img>\r\n                <div className=\"start_time\">{that.showTimer(data.start_time)}</div>\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        })}\r\n\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  \r\n  contestTypeFilter = (isAll, contest_type) => {\r\n    const that = this;\r\n    let isAllActive = true, active_contest_type = 'ALL'\r\n    let contestsToShow = [];\r\n    if (!isAll) {\r\n      isAllActive = false;\r\n      active_contest_type = contest_type\r\n      contestsToShow = that.state.contests.filter((contest) => contest.contest_type == contest_type)\r\n    } else {\r\n      contestsToShow = that.state.contests\r\n    }\r\n    that.setState({ contestsToShow, isAllActive, active_contest_type })\r\n  }\r\n\r\n\r\n    render() {\r\n      const that = this;\r\n      return <div>\r\n        <div className=\"top_sec dispFlex\">\r\n          <i className=\"arrow left back_arrow\"></i>\r\n          <div className='header_title dispFlex'> <span>Choose a contest </span>\r\n          <span>01h 58m 17s </span></div>\r\n          {/* {that.showCards(that.state.banners)} */}\r\n        </div>\r\n        <div className=\"content_sec\">\r\n    \r\n          {that.showContestCategories(that.state.contest_types)}\r\n          {that.showContestDetails(that.state.contestsToShow)}\r\n        </div>\r\n  \r\n      </div>;\r\n    }\r\n  }\r\n\r\n  export default Contest;"]},"metadata":{},"sourceType":"module"}