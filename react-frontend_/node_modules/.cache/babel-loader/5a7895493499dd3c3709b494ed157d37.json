{"ast":null,"code":"import * as types from '../actions/action-types';\nimport { dealFilter, depFilter, arrFilter, coachType, priceFilter, opsFilter, amenFilter, pickFilter, dropFilter, cmpnyIdFilter } from '../common/filters';\nconst initialState = {\n  data: [],\n  // search API results ---- as is from API\n  categoryData: {},\n  buses: [],\n  // Bus data ---- to be used for sorting & filtering ---- can be reset based on data mentioned above\n  categoryBuses: {},\n  staticData: {\n    minPrice: 0,\n    maxPrice: 0,\n    minDepHr: 0,\n    maxDepHr: 23,\n    operators: [],\n    amenities: [],\n    pickups: [],\n    dropoffs: []\n  },\n  // Filtered data to be updated based on user input\n  price: {\n    min: 0,\n    max: 0\n  },\n  departure: {\n    hh: 0,\n    mm: 0\n  },\n  arrival: {\n    hh: 0,\n    mm: 0\n  },\n  operator: [],\n  amenities: [],\n  pickups: [],\n  dropoffs: [],\n  deals: false,\n  coach: [],\n  loader: false\n};\n\nconst searchReducer = function (state = initialState, action) {\n  let currState = state;\n  let buses, categoryBuses, staticData;\n\n  switch (action.type) {\n    case types.GET_SEARCH_SUCCESS:\n      staticData = searchParseStaticData(action.search);\n      return Object.assign({}, state, {\n        data: action.search,\n        buses: action.search.Buses,\n        staticData: staticData,\n        price: {\n          min: staticData.minPrice,\n          max: staticData.maxPrice\n        }\n      });\n\n    case types.GET_CATEGORY_SUCCESS:\n      const categoryData = currState.categoryData;\n      staticData = categoryParseStaticData(action.data, currState.staticData);\n      categoryData[action.category] = action.data;\n      categoryBuses = currState.categoryBuses;\n      categoryBuses[action.category] = JSON.parse(JSON.stringify(action.data.Buses));\n      return Object.assign({}, state, {\n        categoryData,\n        categoryBuses,\n        staticData,\n        price: {\n          min: staticData.minPrice,\n          max: staticData.maxPrice\n        }\n      });\n\n    case types.UPDATE_SEARCH_BUSES:\n      return Object.assign({}, state, {\n        buses: action.buses\n      });\n\n    case types.UPDATE_CATEGORY_BUSES:\n      return Object.assign({}, state, {\n        categoryBuses: action.data\n      });\n    // Deal Filter\n\n    case types.UPDATE_FILTER_DEALS:\n      currState.deals = !currState.deals;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        deals: currState.deals,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Departure Filter\n\n    case types.UPDATE_FILTER_DEP:\n      currState.departure = action.data;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        departure: action.data,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Arrival filter\n\n    case types.UPDATE_FILTER_ARR:\n      currState.arrival = action.data;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        arrival: action.data,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Coach filter\n\n    case types.UPDATE_FILTER_COACH:\n      currState.coach = action.data.val;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        coach: action.data.val,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Price filter\n\n    case types.UPDATE_FILTER_PRICE:\n      currState.price = action.data;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        price: action.data,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Operator filter\n\n    case types.UPDATE_FILTER_OPS:\n      currState.operator = action.data.val;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        operator: action.data.val,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Amen filter\n\n    case types.UPDATE_FILTER_AMEN:\n      currState.amenities = action.data.val;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        amenities: action.data.val,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Pickup filter\n\n    case types.UPDATE_FILTER_PICK:\n      currState.pickups = action.data.val;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        pickups: action.data.val,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Drop filter\n\n    case types.UPDATE_FILTER_DROP:\n      currState.dropoffs = action.data.val;\n      buses = parseFilter(currState);\n      categoryBuses = categoryParseFilter(currState);\n      return Object.assign({}, state, {\n        dropoffs: action.data.val,\n        buses,\n        categoryBuses,\n        loader: true\n      });\n    // Reset filter\n\n    case types.UPDATE_FILTER_RESET:\n      return Object.assign({}, state, {\n        price: {\n          min: state.staticData.minPrice,\n          max: state.staticData.maxPrice\n        },\n        departure: {\n          hh: 0,\n          mm: 0\n        },\n        arrival: {\n          hh: 0,\n          mm: 0\n        },\n        operator: [],\n        amenities: [],\n        pickups: [],\n        dropoffs: [],\n        deals: false,\n        coach: [],\n        depCount: 0,\n        arrCount: 0,\n        priceCount: 0,\n        opsCount: 0,\n        amenCount: 0,\n        pickCount: 0,\n        dropCount: 0,\n        coachCount: 0,\n        totalCount: 0,\n        loader: true\n      });\n\n    case types.UPDATE_LOADER:\n      return Object.assign({}, state, {\n        loader: action.data\n      });\n\n    case types.UPDATE_FILTER_OPS_BY_CMPNY_ID:\n      currState.company = action.data.val;\n      buses = parseFilter(currState, currState.data.Buses, true);\n      return Object.assign({}, state, {\n        company: action.data.val,\n        buses,\n        loader: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst searchParseStaticData = data => {\n  const buses = data.Buses;\n  const amenArr = data.AllAmenities;\n  const coach = ['Seater / Semi-Sleeper', 'Sleeper', 'AC', 'Non AC', 'Volvo / Mercedes', 'Non Volvo'];\n  let minFare,\n      maxFare,\n      minDepHr,\n      maxDepHr,\n      pickups = [],\n      dropoffs = [],\n      operators = [],\n      amenities = [],\n      companies = [];\n  buses.forEach((el, index) => {\n    if (index === 0) {\n      minFare = el.BusStatus.DiscFares[0];\n      maxFare = el.BusStatus.DiscFares[0];\n      minDepHr = new Date(el.DeptTime).getHours();\n      maxDepHr = new Date(el.DeptTime).getHours();\n    }\n\n    if (index > 0) {\n      minFare = el.BusStatus.DiscFares[0] < minFare ? el.BusStatus.DiscFares[0] : minFare;\n      maxFare = el.BusStatus.DiscFares[0] > maxFare ? el.BusStatus.DiscFares[0] : maxFare;\n      minDepHr = new Date(el.DeptTime).getHours() < minDepHr ? new Date(el.DeptTime).getHours() : minDepHr;\n      maxDepHr = new Date(el.DeptTime).getHours() > maxDepHr ? new Date(el.DeptTime).getHours() : maxDepHr;\n    }\n\n    el.Pickups.forEach(pick => pickups.indexOf(pick.PickupName) === -1 ? pickups.push(pick.PickupName) : '');\n    el.Dropoffs.forEach(drop => dropoffs.indexOf(drop.DropoffName) === -1 ? dropoffs.push(drop.DropoffName) : '');\n    el.Amenities.forEach(amen => amenities.indexOf(amenArr[amen]) === -1 ? amenities.push(amenArr[amen]) : '');\n\n    if (operators.indexOf(el.CompanyName) === -1) {\n      operators.push(el.CompanyName);\n    }\n\n    if (companies.indexOf(el.CompanyId) === -1) {\n      companies.push(el.CompanyId);\n    }\n  });\n  return {\n    minPrice: minFare,\n    maxPrice: maxFare,\n    minDepHr: minDepHr,\n    maxDepHr: maxDepHr,\n    operators: operators,\n    amenities: amenities,\n    pickups: pickups,\n    dropoffs: dropoffs,\n    coach: coach,\n    companies: companies\n  };\n};\n\nconst categoryParseStaticData = (data, statics) => {\n  const buses = data.Buses;\n  const amenArr = data.AllAmenities;\n  const coach = ['Seater / Semi-Sleeper', 'Sleeper', 'AC', 'Non AC', 'Volvo / Mercedes', 'Non Volvo'];\n  let minPrice = statics.minPrice,\n      maxPrice = statics.maxPrice,\n      minDepHr = statics.minDepHr,\n      maxDepHr = statics.maxDepHr,\n      pickups = statics.pickups,\n      dropoffs = statics.dropoffs,\n      operators = statics.operators,\n      amenities = statics.amenities;\n  buses.forEach((el, index) => {\n    if (index === 0) {\n      minPrice = el.BusStatus.DiscFares[0] < minPrice ? el.BusStatus.DiscFares[0] : minPrice;\n      maxPrice = el.BusStatus.DiscFares[0] > maxPrice ? el.BusStatus.DiscFares[0] : maxPrice;\n      minDepHr = new Date(el.DeptTime).getHours();\n      maxDepHr = new Date(el.DeptTime).getHours();\n    }\n\n    if (index > 0) {\n      minPrice = el.BusStatus.DiscFares[0] < minPrice ? el.BusStatus.DiscFares[0] : minPrice;\n      maxPrice = el.BusStatus.DiscFares[0] > maxPrice ? el.BusStatus.DiscFares[0] : maxPrice;\n      minDepHr = new Date(el.DeptTime).getHours() < minDepHr ? new Date(el.DeptTime).getHours() : minDepHr;\n      maxDepHr = new Date(el.DeptTime).getHours() > maxDepHr ? new Date(el.DeptTime).getHours() : maxDepHr;\n    }\n\n    el.Pickups.forEach(pick => pickups.indexOf(pick.PickupName) === -1 ? pickups.push(pick.PickupName) : '');\n    el.Dropoffs.forEach(drop => dropoffs.indexOf(drop.DropoffName) === -1 ? dropoffs.push(drop.DropoffName) : '');\n    el.Amenities.forEach(amen => amenities.indexOf(amenArr[amen]) === -1 ? amenities.push(amenArr[amen]) : '');\n\n    if (operators.indexOf(el.CompanyName) === -1) {\n      operators.push(el.CompanyName);\n    }\n  });\n  return {\n    minPrice,\n    maxPrice,\n    minDepHr,\n    maxDepHr,\n    operators,\n    amenities,\n    pickups,\n    dropoffs,\n    coach\n  };\n};\n\nconst categoryParseFilter = st => {\n  const category = st.categoryData;\n  let categoryBuses = {};\n\n  if (Object.keys(category).length > 0) {\n    Object.keys(category).forEach(el => {\n      const loop = category[el].Buses;\n      categoryBuses[el] = parseFilter(st, loop);\n    });\n  }\n\n  return categoryBuses;\n};\n\nconst parseFilter = (st, loop = st.data.Buses, iscmpnyIdFilter = false) => {\n  // const loop = st.data.Buses;\n  let buses = [];\n\n  for (let i = 0; i < loop.length; i++) {\n    let val = dealFilter(loop[i], st.deals) && depFilter(loop[i], st.departure) && arrFilter(loop[i], st.arrival) && coachType(loop[i], st.coach, st.staticData.coach) && priceFilter(loop[i], st.price, st.staticData.minPrice, st.staticData.maxPrice) && opsFilter(loop[i], st.operator) && amenFilter(loop[i], st.amenities, st.data.AllAmenities) && pickFilter(loop[i], st.pickups) && dropFilter(loop[i], st.dropoffs);\n    if (iscmpnyIdFilter === true) val = val && cmpnyIdFilter(loop[i], st.company);\n\n    if (val) {\n      buses.push(loop[i]);\n    }\n  }\n\n  if (st.deals) {\n    buses = buses.sort((a, b) => {\n      return a.DiscountPct < b.DiscountPct ? 1 : b.DiscountPct < a.DiscountPct ? -1 : 0;\n    });\n  }\n\n  return buses;\n};\n\nexport default searchReducer;","map":{"version":3,"sources":["e:/Personal Stuff/Study/Assignments/ReaCTjs/NOSTRA HIRING ASSIGNMENT/react-frontend/src/reducers/search-reducer.js"],"names":["types","dealFilter","depFilter","arrFilter","coachType","priceFilter","opsFilter","amenFilter","pickFilter","dropFilter","cmpnyIdFilter","initialState","data","categoryData","buses","categoryBuses","staticData","minPrice","maxPrice","minDepHr","maxDepHr","operators","amenities","pickups","dropoffs","price","min","max","departure","hh","mm","arrival","operator","deals","coach","loader","searchReducer","state","action","currState","type","GET_SEARCH_SUCCESS","searchParseStaticData","search","Object","assign","Buses","GET_CATEGORY_SUCCESS","categoryParseStaticData","category","JSON","parse","stringify","UPDATE_SEARCH_BUSES","UPDATE_CATEGORY_BUSES","UPDATE_FILTER_DEALS","parseFilter","categoryParseFilter","UPDATE_FILTER_DEP","UPDATE_FILTER_ARR","UPDATE_FILTER_COACH","val","UPDATE_FILTER_PRICE","UPDATE_FILTER_OPS","UPDATE_FILTER_AMEN","UPDATE_FILTER_PICK","UPDATE_FILTER_DROP","UPDATE_FILTER_RESET","depCount","arrCount","priceCount","opsCount","amenCount","pickCount","dropCount","coachCount","totalCount","UPDATE_LOADER","UPDATE_FILTER_OPS_BY_CMPNY_ID","company","amenArr","AllAmenities","minFare","maxFare","companies","forEach","el","index","BusStatus","DiscFares","Date","DeptTime","getHours","Pickups","pick","indexOf","PickupName","push","Dropoffs","drop","DropoffName","Amenities","amen","CompanyName","CompanyId","statics","st","keys","length","loop","iscmpnyIdFilter","i","sort","a","b","DiscountPct"],"mappings":"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","sourcesContent":["import * as types from '../actions/action-types';\r\n\r\nimport { dealFilter, depFilter, arrFilter, coachType, priceFilter, opsFilter, amenFilter, pickFilter, dropFilter, cmpnyIdFilter } from '../common/filters';\r\n\r\nconst initialState = {\r\n  data: [], // search API results ---- as is from API\r\n  categoryData: {},\r\n  buses: [], // Bus data ---- to be used for sorting & filtering ---- can be reset based on data mentioned above\r\n  categoryBuses: {},\r\n  staticData: { minPrice: 0, maxPrice: 0, minDepHr: 0, maxDepHr: 23, operators: [], amenities: [], pickups: [], dropoffs: [] },\r\n  // Filtered data to be updated based on user input\r\n  price: { min: 0, max: 0 },\r\n  departure: { hh: 0, mm: 0 },\r\n  arrival: { hh: 0, mm: 0 },\r\n  operator: [],\r\n  amenities: [],\r\n  pickups: [],\r\n  dropoffs: [],\r\n  deals: false,\r\n  coach: [],\r\n  loader: false\r\n};\r\n\r\nconst searchReducer = function(state = initialState, action) {\r\n  let currState = state;\r\n  let buses, categoryBuses, staticData;\r\n  switch(action.type) {\r\n    case types.GET_SEARCH_SUCCESS:\r\n      staticData = searchParseStaticData(action.search);\r\n      return Object.assign({}, state, {\r\n        data: action.search,\r\n        buses: action.search.Buses,\r\n        staticData: staticData,\r\n        price: { min: staticData.minPrice, max: staticData.maxPrice }\r\n      });\r\n    case types.GET_CATEGORY_SUCCESS:\r\n      const categoryData = currState.categoryData;\r\n      staticData = categoryParseStaticData(action.data, currState.staticData);\r\n      categoryData[action.category] = action.data\r\n      categoryBuses = currState.categoryBuses;\r\n      categoryBuses[action.category] = JSON.parse(JSON.stringify(action.data.Buses));\r\n      return Object.assign({}, state, {\r\n        categoryData,\r\n        categoryBuses,\r\n        staticData,\r\n        price: { min: staticData.minPrice, max: staticData.maxPrice }\r\n      });\r\n    case types.UPDATE_SEARCH_BUSES:\r\n      return Object.assign({}, state, { buses: action.buses });\r\n    case types.UPDATE_CATEGORY_BUSES:\r\n      return Object.assign({}, state, { categoryBuses: action.data });\r\n    // Deal Filter\r\n    case types.UPDATE_FILTER_DEALS:\r\n      currState.deals = !currState.deals;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { deals: currState.deals, buses, categoryBuses, loader: true });\r\n    // Departure Filter\r\n    case types.UPDATE_FILTER_DEP:\r\n      currState.departure = action.data;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { \r\n        departure: action.data, \r\n        buses, categoryBuses, loader: true\r\n      });\r\n    // Arrival filter\r\n    case types.UPDATE_FILTER_ARR:\r\n      currState.arrival = action.data;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { arrival: action.data, buses, categoryBuses, loader: true });\r\n    // Coach filter\r\n    case types.UPDATE_FILTER_COACH:\r\n      currState.coach = action.data.val;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { coach: action.data.val, buses, categoryBuses, loader: true });\r\n    // Price filter\r\n    case types.UPDATE_FILTER_PRICE:\r\n      currState.price = action.data;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { \r\n        price: action.data, \r\n        buses, categoryBuses, loader: true\r\n      });\r\n    // Operator filter\r\n    case types.UPDATE_FILTER_OPS:\r\n      currState.operator = action.data.val;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { operator: action.data.val, buses, categoryBuses, loader: true });\r\n    // Amen filter\r\n    case types.UPDATE_FILTER_AMEN:\r\n      currState.amenities = action.data.val;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { amenities: action.data.val, buses, categoryBuses, loader: true });\r\n    // Pickup filter\r\n    case types.UPDATE_FILTER_PICK:\r\n      currState.pickups = action.data.val;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { pickups: action.data.val, buses, categoryBuses, loader: true });\r\n    // Drop filter\r\n    case types.UPDATE_FILTER_DROP:\r\n      currState.dropoffs = action.data.val;\r\n      buses = parseFilter(currState);\r\n      categoryBuses = categoryParseFilter(currState);\r\n      return Object.assign({}, state, { dropoffs: action.data.val, buses, categoryBuses, loader: true });\r\n    // Reset filter\r\n    case types.UPDATE_FILTER_RESET:\r\n      return Object.assign({}, state, { \r\n        price: { min: state.staticData.minPrice, max: state.staticData.maxPrice },\r\n        departure: { hh: 0, mm: 0 },\r\n        arrival: { hh: 0, mm: 0 },\r\n        operator: [],\r\n        amenities: [],\r\n        pickups: [],\r\n        dropoffs: [],\r\n        deals: false,\r\n        coach: [],\r\n        depCount: 0,\r\n        arrCount: 0,\r\n        priceCount: 0,\r\n        opsCount: 0,\r\n        amenCount: 0,\r\n        pickCount: 0,\r\n        dropCount: 0,\r\n        coachCount: 0,\r\n        totalCount: 0,\r\n        loader: true\r\n      });\r\n    case types.UPDATE_LOADER:\r\n      return Object.assign({}, state, { loader: action.data });\r\n    case types.UPDATE_FILTER_OPS_BY_CMPNY_ID:\r\n      currState.company = action.data.val;\r\n      buses = parseFilter(currState, currState.data.Buses, true);\r\n      return Object.assign({}, state, { company: action.data.val, buses, loader: true });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst searchParseStaticData = (data) => {\r\n  const buses = data.Buses;\r\n  const amenArr = data.AllAmenities;\r\n  const coach = ['Seater / Semi-Sleeper', 'Sleeper', 'AC', 'Non AC', 'Volvo / Mercedes', 'Non Volvo'];\r\n  let minFare, maxFare, minDepHr, maxDepHr, pickups = [], dropoffs = [], operators = [], amenities = [],companies = [];\r\n  buses.forEach((el, index) => {\r\n    if (index === 0) {\r\n        minFare = el.BusStatus.DiscFares[0];\r\n        maxFare = el.BusStatus.DiscFares[0];\r\n        minDepHr = new Date(el.DeptTime).getHours();\r\n        maxDepHr = new Date(el.DeptTime).getHours();\r\n    }\r\n    if (index > 0) {\r\n        minFare = el.BusStatus.DiscFares[0] < minFare ? el.BusStatus.DiscFares[0] : minFare;\r\n        maxFare = el.BusStatus.DiscFares[0] > maxFare ? el.BusStatus.DiscFares[0] : maxFare;\r\n        minDepHr = new Date(el.DeptTime).getHours() < minDepHr ? new Date(el.DeptTime).getHours() : minDepHr;\r\n        maxDepHr = new Date(el.DeptTime).getHours() > maxDepHr ? new Date(el.DeptTime).getHours() : maxDepHr;\r\n    }\r\n    el.Pickups.forEach(pick => pickups.indexOf(pick.PickupName) === -1 ? pickups.push(pick.PickupName) : '');\r\n    el.Dropoffs.forEach(drop => dropoffs.indexOf(drop.DropoffName) === -1 ? dropoffs.push(drop.DropoffName) : '');\r\n    el.Amenities.forEach(amen => amenities.indexOf(amenArr[amen]) === -1 ? amenities.push(amenArr[amen]) : '');\r\n    if (operators.indexOf(el.CompanyName) === -1) {operators.push(el.CompanyName);}\r\n    if (companies.indexOf(el.CompanyId) === -1) {companies.push(el.CompanyId);}\r\n  });\r\n\r\n  return {\r\n    minPrice: minFare,\r\n    maxPrice: maxFare,\r\n    minDepHr: minDepHr,\r\n    maxDepHr: maxDepHr,\r\n    operators: operators,\r\n    amenities: amenities,\r\n    pickups: pickups,\r\n    dropoffs: dropoffs,\r\n    coach: coach,\r\n    companies : companies,\r\n  };\r\n}\r\n\r\nconst categoryParseStaticData = (data, statics) => {\r\n  const buses = data.Buses;\r\n  const amenArr = data.AllAmenities;\r\n  const coach = ['Seater / Semi-Sleeper', 'Sleeper', 'AC', 'Non AC', 'Volvo / Mercedes', 'Non Volvo'];\r\n  let minPrice = statics.minPrice,\r\n    maxPrice = statics.maxPrice,\r\n    minDepHr = statics.minDepHr,\r\n    maxDepHr = statics.maxDepHr,\r\n    pickups = statics.pickups,\r\n    dropoffs = statics.dropoffs,\r\n    operators = statics.operators,\r\n    amenities = statics.amenities;\r\n  buses.forEach((el, index) => {\r\n    if (index === 0) {\r\n        minPrice = el.BusStatus.DiscFares[0] < minPrice ? el.BusStatus.DiscFares[0] : minPrice;\r\n        maxPrice = el.BusStatus.DiscFares[0] > maxPrice ? el.BusStatus.DiscFares[0] : maxPrice;\r\n        minDepHr = new Date(el.DeptTime).getHours();\r\n        maxDepHr = new Date(el.DeptTime).getHours();\r\n    }\r\n    if (index > 0) {\r\n        minPrice = el.BusStatus.DiscFares[0] < minPrice ? el.BusStatus.DiscFares[0] : minPrice;\r\n        maxPrice = el.BusStatus.DiscFares[0] > maxPrice ? el.BusStatus.DiscFares[0] : maxPrice;\r\n        minDepHr = new Date(el.DeptTime).getHours() < minDepHr ? new Date(el.DeptTime).getHours() : minDepHr;\r\n        maxDepHr = new Date(el.DeptTime).getHours() > maxDepHr ? new Date(el.DeptTime).getHours() : maxDepHr;\r\n    }\r\n    el.Pickups.forEach(pick => pickups.indexOf(pick.PickupName) === -1 ? pickups.push(pick.PickupName) : '');\r\n    el.Dropoffs.forEach(drop => dropoffs.indexOf(drop.DropoffName) === -1 ? dropoffs.push(drop.DropoffName) : '');\r\n    el.Amenities.forEach(amen => amenities.indexOf(amenArr[amen]) === -1 ? amenities.push(amenArr[amen]) : '');\r\n    if (operators.indexOf(el.CompanyName) === -1) {operators.push(el.CompanyName);}\r\n  });\r\n\r\n  return { minPrice, maxPrice, minDepHr, maxDepHr, operators, amenities, pickups, dropoffs, coach };\r\n}\r\n\r\nconst categoryParseFilter = (st) => {\r\n  const category = st.categoryData;\r\n  let categoryBuses = {};\r\n  if (Object.keys(category).length > 0) {\r\n    Object.keys(category).forEach(el => {\r\n      const loop = category[el].Buses;\r\n      categoryBuses[el] = parseFilter(st, loop);\r\n    })\r\n  }\r\n  return categoryBuses;\r\n}\r\n\r\nconst parseFilter = (st, loop = st.data.Buses, iscmpnyIdFilter=false) => {\r\n  // const loop = st.data.Buses;\r\n  let buses = [];\r\n  for (let i = 0; i < loop.length; i++) {\r\n    let val = dealFilter(loop[i], st.deals) && \r\n    depFilter(loop[i], st.departure) &&\r\n    arrFilter(loop[i], st.arrival) &&\r\n    coachType(loop[i], st.coach, st.staticData.coach) &&\r\n    priceFilter(loop[i], st.price, st.staticData.minPrice, st.staticData.maxPrice) &&\r\n    opsFilter(loop[i], st.operator) &&\r\n    amenFilter(loop[i], st.amenities, st.data.AllAmenities) &&\r\n    pickFilter(loop[i], st.pickups) &&\r\n    dropFilter(loop[i], st.dropoffs) ;\r\n    if(iscmpnyIdFilter === true)\r\n      val = val && cmpnyIdFilter(loop[i], st.company);\r\n    if (val) {\r\n      buses.push(loop[i]);\r\n    }\r\n  }\r\n  if (st.deals) {\r\n    buses = buses.sort((a,b) => {return (a.DiscountPct < b.DiscountPct) ? 1 : ((b.DiscountPct < a.DiscountPct) ? -1 : 0)});\r\n  }\r\n  return buses;\r\n}\r\n\r\nexport default searchReducer;\r\n"]},"metadata":{},"sourceType":"module"}